
📌 Python Naming Conventions 
-----------------------------
Purpose		Recommended Style	Example
------- 	-----------------	-------
Variable names	snake_case		user_name, total_count
Function names	snake_case		get_data(), calculate_sum()
Class names	CamelCase (PascalCase)	MyClass, UserProfile
Constants	ALL_CAPS		MAX_SIZE, PI

Case Type	Example	Used for (Python)
---------	-------------------------
snake_case	user_name	Variables, functions ✅
camelCase	userName	JavaScript, Java ❌ (Python)
PascalCase	UserProfile	Classes ✅
UPPER_CASE	MAX_SIZE	Constants ✅
kebab-case	user-name	Not used in Python ❌

Path
cmd
code .

python filename.py


Python is a clear and powerful OOP language, comparable to Perl, Ruby or Java. It combines the features of C and Java. It is an Interpreted Language, Procedural and is Platform Independent. It is Scalable. It is a case sensitive Programming Language. It has Huge Library and was Developed by Guido Van Rossum.

Java -> Object Oriented Programming(OOP) Language
C -> Procedure Oriented Language

Applications
------------
Web Application -> Django, Pyramid, Flask, Bottle
Desktop GUI Application -> Tkinter
Console Based Application(CLI)
Games and 3D Application
Mobile Application
Scientific and Numeric
Data Science
Machine Learning -> scikit-learn, TensorFlow
Data Analysis -> Matplotlib, Seaborn
Business Application 

How Python Works
----------------
Source code -> .py file

Python Compiler -> converts source code into byte code

Byte Code -> It is found in .pyc file. It represents the fixed set of instructions created by Python Developer representing all type of operations.
	1 byte = 8bits

Python Virtual Machine PVM -> converts into machine understandable.


Cpython
Jpython/Jython
PyPy
RubyPython
IronPython
StacklessPython
Pythonxy
AnacondaPython

	Source Code Program -------------------> Byte Code ---------------------> Binary Code/Machine Code ----------> Computer
		app.py -----------> compile ----------------> run using PVM ------------------------------------------> output


PVM
---
	Source Code Program -------------------> Byte Code ------------> Interpreter --------------> Binary Code/Machine Code ----------> Computer
		app.py -----------> compile --------------------------------> PVM -------------------------------------------------------> output

Executing Python Program
------------------------
Command Line Window
IDLE
Notepad or Notepad++
PyCharm
Visual Studio Code

Identifier
----------
	Variable_Name, Function_Name, Symbolic_Constant_Name, Class_Name etc, 
	_ is only allowed in between Words of Identifiers

Reserved Keywords
-----------------
True
False
None
and
or
not
is
in
if
else
elif
while
for
break
continue
pass
def
return
yield
lambda
try
except
finally
raise
import
from
as
global
nonlocal
assert
with
async
await
class

Constant
--------
	It is an identifier which is defined on a Module level,  and written in all capital letters with _ separating the words. Generally the value of a constant cannot be changed, but in Python we can change the value. In Python it is not possible to define constant whose value cannot be changed.

Variable
--------
	Identifier connected to memory location
	Variable is considered as tag that is tied to some value. Python considers value as object.

Rules
	1. Only _ can be used in a variable between words.
	2. Only starts with _ or alphabet.
	3. No reserved keywords.

Data Type
---------
Built in Data Type
	1. None Type
		It represents an Object that doesn't not containing any value.

	2. Numeric Types
		2.1.  Integer -> Int
			There is no fixed no size limit of any int datatype. Integer Number without decimal part or Fracctional part
		2.2. Float -> Float
			There is no fixed no size limit of any int datatype. Integer Number with decimal part or Fracctional part
			5.1e5 = (5.1)*10^5
		2.3. Complex -> Real part + Imaginary part
			a+jb, where j is the square root value of -1.
		2.4. Bool -> bool
			(True = 1, False = 0) True + True = 2, False + True = 1
	
	3. Sequences
		3.1. String -> It is Immutable. It represents group of characters, Strings are enclosed in double quotes or single quotes.
		3.2. List -> It is Mutable. It is a group of elements. The List elements can be modified and It is dynamic in size. It can store diff types of elements. It is represented using []. By using the index values we can access the elements. From the beginning of the List, the index is 0 and from the ending of the List, the index is -1.
		3.3. Tuple ->  It is Immutable. It is a group of elements. The Tuple elements can not be modified and It is dynamic in size. It can store diff types of elements. It is represented using (). By using the index values we can access the elements. From the beginning of the Tupel, the index is 0 and from the ending of the Tuple, the index is -1.
		3.4. Range -> It represents the sequenece of numbers. The numbers in the Range are not modifiable. It can also be accessed by index.
			range(StartValue, EndValue, [Step]) -> Here EndValue is not considered while performing operation.

	4. Sets -> It is an unordered collection of elements much like set in mathematics. The order of elements is not maintained in the sets. It means the elements may not appear in the same order as they are inserted into the set. It does not allow duplicate values. As they are unordered, we cannot access them using the index. Set is represented using {}.

	5. Mappings/Dictionary/dict -> It represents a group of elements in the form of Key Value pairs. Keys should be a unique.
	6. Character -> There is not Character Type specifically 
User Defined Data Type
	1. Array
	2. Class
	3. Module

Membership Operators
--------------------
Used for membership to test for membership in a sequence such as String, List, Tuples, Dictionaries.
	1. in -> It is used to find elements in the specified sequence. It returns True if elements found in the sequence else it returns False.
	2. not in -> It is used to find elements in the specified sequence. It returns False if elements found in the sequence else it returns True.

Identity Operators
------------------
They compare the memory locations of two objects. Hence, it is possible to know whether two objects are same or no.
	1. is -> It is used to compare whether the two elements are same. It returns True if the address of both elements is same, else it returns False.
	2. is not -> It is used to compare whether the two elements are same. It returns False if the address of both elements is same, else it returns True.

Operator Precedence and Associativity
-------------------------------------
	5 Important Points on Operator Precedence and Associativity

(1+1)*2**4//3+4-1 -> Solve using Operator Precedence and Associativity -> 13 is answer.

Order of Precedence
1. ()
2. **
3. Unary +, Unary -
4. *, /, //, %
5. Binary +, Binary -
6. Comparison operators (==, !=, >, <, >=, <=)
7. Identity, Membership operators
8. Logical not
9. Logical and
10. Logical or

Type Conversion
---------------
Implicit -> Python Automatically converts from one DataType to other DataType.

Explicit -> Programmer converts from one DataType to other DataType.
int()
float()
complex()
complex(x, y)
